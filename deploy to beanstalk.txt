name: CICD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  compile:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven (Generate WAR)
      run: mvn clean package -DskipTests
    - name: List files in target directory
      run: ls -l target/
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: target/*.war  # Change to *.war if you're building a .war file

  security-check:
    runs-on: ubuntu-latest
    needs: compile

    steps:
    - uses: actions/checkout@v4
    - name: Trivy Installation
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update -y
        sudo apt-get install -y trivy

    - name: Trivy FS Scan
      run: trivy fs --format table -o fs-report.json .

    - name: Gitleaks Installation
      run: sudo apt install gitleaks -y
    - name: Gitleaks Code Scan
      run: gitleaks detect source . -r gitleaks-report.json -f json

  test:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Unit Test Cases
      run: mvn test

  deploy_to_s3:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact
        path: target/

    - name: List files in target after download
      run: ls -l target/

    - name: Upload artifact to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}  # AWS credentials
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1  # Change to your region
      run: |
        aws s3 cp target/*.war s3://githubs3project/path/ --region $AWS_REGION

  deploy_to_beanstalk:
    runs-on: ubuntu-latest
    needs: deploy_to_s3
    steps:
    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: build-artifact
        path: target/

    - name: List files in target directory after download
      run: ls -l target/

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1  # Update with your AWS region

    - name: Verify WAR file existence in target directory
      run: |
        echo "Checking for .war file in target directory..."
        ls -l target/*.war
        # Optionally: Check if the file exists
        if [ ! -f target/*.war ]; then
          echo "Error: WAR file not found!"
          exit 1
        fi

    - name: Package the WAR into a ZIP file for Elastic Beanstalk
      run: |
        echo "Packaging the WAR file into a ZIP file..."
        zip -r my-app.zip target/*.war
        ls -l my-app.zip

    - name: Upload .zip file to S3
      run: |
        echo "Uploading .zip file to S3..."
        aws s3 cp my-app.zip s3://githubs3project/my-app.zip
        echo "File uploaded to S3 successfully."

    - name: Create application version in Elastic Beanstalk
      run: |
        echo "Creating Elastic Beanstalk application version..."
        aws elasticbeanstalk create-application-version \
          --application-name gitcicd-sample \
          --version-label $GITHUB_SHA \
          --source-bundle S3Bucket=githubs3project,S3Key=my-app.zip \
          --region eu-central-1
        echo "Elastic Beanstalk application version created."

    - name: Deploy to Elastic Beanstalk
      run: |
        echo "Deploying to Elastic Beanstalk..."
        aws elasticbeanstalk update-environment \
          --application-name gitcicd-sample \
          --environment-name gitcicd-sample-icw \
          --version-label $GITHUB_SHA \
          --region eu-central-1
        echo "Elastic Beanstalk deployment initiated."