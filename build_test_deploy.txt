# -----------------------------------------------------------------------------
# Workflow: Prepare, Test, Build, Upload WAR & Deploy iCasework
#
# Automates the process of building the iCasework WAR file using Maven.
# Triggered on push, pull request, or manual dispatch on the `main` branch.
# -----------------------------------------------------------------------------
name: Prepare, Test, Build, Upload WAR & Deploy

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  # `workflow_dispatch` - Allows manual trigger of the workflow from the GitHub UI.

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            code:
              - 'src/**'
              - 'db/**'
              - 'pom.xml'
              - 'package.json'
              - 'Dockerfile'
              - 'compose.yaml'
      - run: echo "Code changes detected? ${{ steps.filter.outputs.code }}"
  build:
    needs: changes
    runs-on: ubuntu-latest
    env:
      TZ: "Europe/London"
    outputs:
      project_name: ${{ steps.pominfo.outputs.project_name }}
      version: ${{ steps.pominfo.outputs.version }}
      git_commit_id: ${{ steps.pominfo.outputs.git_commit_id }}
    steps:
      - name: Skip build if only docs/markdown/github changes
        if: needs.changes.outputs.code != 'true'
        run: |
          echo "No code changes detected. Skipping build steps."
      - name: Run full build
        if: needs.changes.outputs.code == 'true'
        run: echo "Running full build pipeline..."
      - name: Set timezone to Europe/London
        run: sudo timedatectl set-timezone "Europe/London"
      - name: Checkout code
        if: needs.changes.outputs.code == 'true'
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: Checkout with submodules
        if: needs.changes.outputs.code == 'true'
        uses: actions/checkout@v4    
        with:
          submodules: true
          lfs: true
          token: ${{ secrets.ICASEWORK_CICD_WORKFLOW_PAT }}
      # Set up Git LFS explicitly to be safe since we clone icasework-dependencies repo that uses LFS
      - name: Initialize Git LFS
        if: needs.changes.outputs.code == 'true'
        run: git lfs install
      # Set up Java 21 & Maven
      - name: Set up Java and Maven
        if: needs.changes.outputs.code == 'true'  
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
          cache: maven

      # Obtain version label details from pom file
      - name: Install xmllint
        if: needs.changes.outputs.code == 'true'
        run: sudo apt-get update && sudo apt-get install -y libxml2-utils
      - name: Extract project info from pom.xml
        if: needs.changes.outputs.code == 'true'
        id: pominfo
        run: |
          PROJECT_NAME=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='artifactId']/text()" pom.xml)
          VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" pom.xml)
          GIT_COMMIT_ID=$(git rev-parse --short HEAD)

          echo "project_name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "git_commit_id=$GIT_COMMIT_ID" >> "$GITHUB_OUTPUT"    

      # Clone private dependencies and install to local Maven repo
      - name: Clone and install icasework-dependencies
        if: needs.changes.outputs.code == 'true'  
        env:
          TOKEN: ${{ secrets.ICASEWORK_CICD_WORKFLOW_PAT }}
        run: |
          set -e
          echo "Cloning icasework-dependencies repo..."
          git clone https://x-access-token:${TOKEN}@github.com/civica/icasework-dependencies.git
          cd icasework-dependencies
          echo "Making install.sh executable..."
          chmod +x install.sh
          echo "Running install.sh..."
          ./install.sh
      # Note: The secrets.ICASEWORK_CICD_WORKFLOW_PAT is required to access the private dependency repo
      # which is set to reset periodically, see GH task issue #520 for details on token rotation and reminders.
      
      # Installing Git-crypt for decryption of ebextenions folder
      - name: Install git-crypt
        if: needs.changes.outputs.code == 'true'    
        run: |
          sudo apt-get update
          sudo apt-get install -y git-crypt
 
      - name: Decode and import git-crypt key
        if: needs.changes.outputs.code == 'true'
        run: |
          set -e
          echo "${{ secrets.GIT_CRYPT_KEY }}" | base64 --decode > git-crypt-key
          git-crypt unlock git-crypt-key
      # Apply production.properties
      - name: Recreate production.properties
        if: needs.changes.outputs.code == 'true'
        run: |
          echo "${{ secrets.PRODUCTION_PROPERTIES_B64 }}" | base64 --decode > src/main/filters/production.properties

      - name: Initialise database
        if: needs.changes.outputs.code == 'true'
        run: |
          docker compose up -d --build db
          docker ps
          echo "Waiting for database to be ready..."
          sleep 60
          until docker exec icasework-db-1 pg_isready -U postgres; do
          sleep 2
          done
          echo "Running test query to list schemas..."
          docker exec icasework-db-1 psql -U postgres -d icasework_test -c '\dn'
          docker compose exec --env POSTGRES_DB=icasework_test db dbmate-schema civicalrtestlegal status

      # Build the Maven project with tests using Development profile
      # This code "-Dtest=!com.icasework.api.ContactsControllerTest*" excludes the 7 tests that are failing in GitHub runner
      - name: CI build
        if: needs.changes.outputs.code == 'true'
        run: mvn test --batch-mode --no-transfer-progress -Dtest=!com.icasework.api.ContactsControllerTest*

      # Build the Maven project skipping tests (performed in previous step) using the production profile
      - name: WAR build
        if: needs.changes.outputs.code == 'true'
        run: mvn -DskipTests=True -P production clean package

      # Upload the generated WAR file as an artifact for use in the upload to S3 job
      - name: Upload WAR artifact
        if: needs.changes.outputs.code == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: war
          path: target/*.war

      - name: Show workflow run and Git commit info
        if: needs.changes.outputs.code == 'true'
        run: |
          echo "Branch: ${{ github.ref }}, Run: ${{ github.run_number }}"
          git log -1 --pretty=format:"Commit: %h%nAuthor: %an%nDate: %ad%nMessage: %s"

  upload:
      runs-on: ubuntu-latest
      needs: [build, changes]
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changes.outputs.code == 'true'
      outputs:
       version_label: ${{ steps.set_label.outputs.version_label }}
      steps:
      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: war
          path: .

      - name: Find WAR file
        run: |
          WAR_FILE=$(find . -maxdepth 1 -name "*.war" | head -n 1)
          echo "WAR_NAME=$(basename "$WAR_FILE")" >> $GITHUB_ENV

      - name: Set version label
        id: set_label
        run: |
          label=${{ needs.build.outputs.project_name }}-v${{ needs.build.outputs.version }}-${{ needs.build.outputs.git_commit_id }}
          echo "version_label=$label" >> "$GITHUB_OUTPUT"

      - name: Deploy WAR file to first beanstalk only
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: "UAT iCasework"
          environment_name: devadmin-al23-0
          region: eu-central-1
          version_label: ${{ steps.set_label.outputs.version_label }}
          deployment_package: ${{ env.WAR_NAME }}
          use_existing_version_if_available: true
  # Deploy war file to beanstalks devportal-al23-0, uatadmin-al23-0 & uatportal-al23-0 in AWS data account (Frankfurt region)
  deploy:
    runs-on: ubuntu-latest
    needs: [upload, changes]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changes.outputs.code == 'true'
    strategy:
      matrix:
       env_name:
          - devportal-al23-0
          - uatadmin-al23-0
          - uatportal-al23-0
          
    steps: 
    - name: Deploy existing version to each environment
      uses: einaregilsson/beanstalk-deploy@v21
      with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: "UAT iCasework"
          environment_name: ${{ matrix.env_name }}
          region: eu-central-1
          version_label: ${{ needs.upload.outputs.version_label }}
          deployment_package: ${{ env.WAR_NAME }}
          use_existing_version_if_available: true
    
    - name: upload version_label to aws parameter store
      run: |
        export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ssm put-parameter \
          --name "/CICD/UAT/version_label" \
          --value "${{ needs.upload.outputs.version_label }}" \
          --type "String" \
          --overwrite \
          --region eu-central-1